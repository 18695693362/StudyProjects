#+TITLE: Unity Shader And Effect Cookbook
#+OPTIONS: ^:{}
#+OPTIONS: \n:t 
#+HTML_HEAD: <link rel="stylesheet" href="http://orgmode.org/org-manual.css" type="text/css" />
Tips: 下载 htlm 格式文件直接在浏览器中打开，可以查看格式优化过的文档。
* Basic 
** Properties
#+BEGIN_EXAMPLE surface shader
Properties {
  _MyFloatValue("This is a Float", Float) = 1.5
  _MyRangeValue("This is a Range", Range(0,10)) = 2.5
  _MyColorValue("This is a ColorAmbient Color", Color) = (0.5,1,1,1)
  _MyVectorValue("This is a Vector", Vector) = (1,2,3,4)
  _My2DValue("This is a Texture 2D", 2D) = "white" {}
  _MyRectValue("This is a Texture Rect", Rect) = "white" {}
  _MyCubeValue("This is a Texture Cube", Cube) = "white" {}
}
#+END_EXAMPLE
** SurfaceOutput
#+BEGIN_EXAMPLE surface shader
struct SurfaceOutput { 
    half3 Albedo;      //The color of the pixel  片段的颜色
    half3 Normal;      //The normal of the pixel  法线
    half3 Emission;    //The emissive color of the pixel 发出的颜色 
    half Specular;     //Specular power of the pixel    镜面高光系数
    half Gloss;        //Gloss intensity of the pixel  光泽强度
    half Alpha;        //Alpha value for the pixel     片段的透明度
};
#+END_EXAMPLE
** Input
| 名称                      | 类型   | 意义                                                            |
|---------------------------+--------+-----------------------------------------------------------------|
| uv_XXX                    | float2 | 存放贴图的 uv 坐标                                              |
| viewDir                   | float3 | 存放视觉方向（也就是眼睛方向，摄像机方向）                      |
| COLOR                     | float4 | 存放插值后的顶点颜色                                            |
| screenPos                 | float4 | 存放屏幕空间的坐标                                              |
| worldPos                  | float3 | 存放世界坐标                                                    |
| worldRefl                 | float3 | 存放世界空间中的反射向量                                        |
| worldNormal               | float3 | 如果 surface shader 没有修改 o.Normal 则存放世界空间的法向量   |
| worldRefl;INTERNAL_DATA   | float3 | 如果 surface shader 修改了 o.Normal，则存放世界空间的反射向量。 |
| worldNormal;INTERNAL_DATA | float3 | 如果 surface shader 修改了 o.Normal，则存放世界空间的法向量。   |
#+BEGIN_EXAMPLE
Tips:
使用 worldRefl;INTERNAL_DATA 时， 通过 WorldReflectionVector (IN, o.Normal)来从法线贴图获得反射向量
使用 worldNormal;INTERNAL_DATA 时，通过 WorldNormalVector（IN, o.Normal）来从法线贴图获得法线
#+END_EXAMPLE
[[http://docs.unity3d.com/Manual/SL-SurfaceShaders.html][Unity 官方文档]]
** shader 的代码结构
#+BEGIN_EXAMPLE suface shader
Shader "GroupName/SubGroupName/ShaderName"
{
  Properties {
    _MyFloatValue("This is a Float", Float) = 1.5
    //......
  }
  SubShader 
  {
    Tags { "Queue" = "Transparent" "RenderType"="Opaque"}
    ZWrite Off ColorMask RGB
    CGPROGRAM
    #pragma surface surf Lambert alpha:fade
    /** surface shader **/
    ENDCG
    Pass {
      Name "FORWARD"
      Tags { "LightMode" = "ForwardBase" }
      #pragma surface surf Lambert alpha:fade
    }
    Pass {
      //......
    }
  }
  SubShader {
    //......
  }
  //....  other subshader
}
#+END_EXAMPLE
*** Properties
Properties 指定了 surface shader 中可供调节的变量，这些变量可以被显示在 Inspector 中。
*** SubShader
1 每个 Shader 都包含一个 SubShader 列表。SubShader 列表中至少要有一个 SubShader。当加载一个 Shader 时，Unity 会遍历其包含的 SubShader 列表，选择第一个用户机器所支持的 SubShader。如果没有 SubShader 被支持，则 Unity 会尝试使用 fallback shader。

2 一个 SubShader 定义了一个 Pass 列表，也就是说一个 SubShader 中包含多个 Pass，在 SubShader 中可以有选择地设置其中包含的所有 Pass 所公用的任何状态。此外 SubShader 还有额外的 Tags 可以被设置。

3 Unity 选定了 SubShader 后，当渲染一个物体时，SubShader 中的每个 Pass 会导致对该物体的一次渲染。

4 任何在 Pass 中可用的状态都可以放置在 SubShader 中，这样的话 SubShader 中的所有 Pass 都会公用该状态的设置。
**** SubShader Tags
***** 渲染次序 Queue 
可以通过 Queue tag 来确定物体的渲染顺序。Shader 决定了它的物体所属的渲染队列，这样就可以确保透明物体在不透明物体绘制之后再绘制。Unity 有四个预定义的渲染队列，但是默认的渲染队列之间可以定义更多的渲染队列。

每个渲染队列在内部是通过一个整型的索引来表示的。Background 为 1000，Geometry 为 2000，AlphaTest 为 2450，Transparent 为 3000，Overlay 为 4000。

小于等于 2500 的渲染队列，被当做不透明物体的渲染队列，并且可以调整物体的渲染顺序来达到最佳性能。更高的渲染队列被认为是透明物体的渲染队列，并且物体依据距离来排序，从最远的物体开始渲染直到最近的物体。Skyboxes 是在所有不透明物体和所有透明物体之间被绘制的。
#+BEGIN_EXAMPLE
Tags { "Queue" = "Transparent" }
#+END_EXAMPLE
****** Background
这个渲染队列在任何其他队列之前被渲染。
****** Geometry (默认的渲染队列)
不透明的几何体可以使用这个渲染队列
****** AlphaTest
需要 Alpha 测试的几何体使用该队列。它独立于 Geometry 渲染队列，因为所有固体渲染之后，再渲染需要 alpha-tested 物体会更高效。(因为只对需要 Alpha 测试的物体开启 Alpha 测试，不需要 Alpha 测试的不会放在该队列，所以高效)
****** Transparent
Geometry 和 AlphaTest 之后渲染的队列，该队列以从后到前的顺序渲染。需要 alpha-blended 的物体使用该队列。
****** Overlay
该渲染队列可以实现覆盖效果。任何最终渲染的物体使用该队列。
****** 自定义渲染队列
#+BEGIN_EXAMPLE 
Tags { "Queue" = "Geometry+1" }
#+END_EXAMPLE
***** 渲染类型 RenderType
RenderType 将 shaders 归类为很多不同的预定义的组。

Shader Replacement 会用到该设置。/Manual/SL-ShaderReplacement.html

有时候通过该设置来制作摄像机的深度贴图。/Manual/SL-CameraDepthTexture.html
***** DisableBatching 
有些 Shader 在 DrawCallBatching 下是不可用的，因为 DrawCallBatching 会将所有的几何体变换到世界空间，因此本地空间信息会丢失。
#+BEGIN_EXAMPLE 
Tags {"DisableBatching" = "True"}       // 为该 shader 始终禁止 Batching
Tags {"DisableBatching" = "False"}      // 为该 shader 开启 Batching
Tags {"DisableBatching" = "LODFading"}  // LOD Fading 开启时，禁止 Batching
#+END_EXAMPLE
***** 其他的一些 tag
#+BEGIN_EXAMPLE
ForceNoShadowCasting
IgnoreProjector
CanUseSpriteAtlas
PreviewType
#+END_EXAMPLE
**** SurfaceShader 编译指令
surface shader 被放置在 CGPROGRAM ... ENDCG 块中。有两点需要注意：

1 surface shader 必须放在 SubShader 块中，不能放在 Pass 中。Unity 会通过编译将其放在不同 Pass 中。

2 使用下面的指令来指明一个 surface shader
#+BEGIN_EXAMPLE su
#pragma surface surfaceFunction lightModel [optionalparams]
#+END_EXAMPLE
**** LOD
LOD 很简单，它是 Level of Detail 的缩写，在这里例子里我们指定了其为 200（其实这是 Unity 的内建 Diffuse 着色器的设定值）。这个数值决定了我们能用什么样的 Shader。在 Unity 的 Quality Settings 中我们可以设定允许的最大 LOD，当设定的 LOD 小于 SubShader 所指定的 LOD 时，这个 SubShader 将不可用。Unity 内建 Shader 定义了一组 LOD 的数值，我们在实现自己的 Shader 的时候可以将其作为参考来设定自己的 LOD 数值，这样在之后调整根据设备图形性能来调整画质时可以进行比较精确的控制。

VertexLit 及其系列 = 100
Decal, Reflective VertexLit = 150
Diffuse = 200
Diffuse Detail, Reflective Bumped Unlit, Reflective Bumped VertexLit = 250
Bumped, Specular = 300
Bumped Specular = 400
Parallax = 500
Parallax Specular = 600
*** Pass
**** Name
为 Pass 定义一个名称，这样就可以通过 UsePass 来引用它了。
UsePass "VertexLit/SHADOWCASTER"
**** Tags
Pass 使用 Tags 来告诉渲染引擎，什么时候、如何被渲染。
***** LightMode
LightMode tag 定义了 Pass 在光照管线中的角色。这些 tags 很少手动指定。
| Name         | Detail                                                                               |
|--------------+--------------------------------------------------------------------------------------|
| Always       | 总是渲染，没有光照被应用                                                             |
| ForwardBase  | ForwardRendering 中被应用，环境光、主要的定向光、vertex/SH 光、光照贴图被应用        |
| ForwardAdd   | ForwardRendering 中附加的基于像素的光照被应用，每个灯光一个 Pass                     |
| Deferred     | DeferredRendring，渲染 g-buffer                                                      |
| ShadowCaster | 渲染物体的深度到阴影贴图或深度贴图中                                                 |
| PrepassBase  | legacy Deferred Lighting,渲染法线和镜面指数                                          |
| PrepassFinal | legacy Deferred Lighting,渲染最终颜色                                                |
| Vertex       | legacy Vertex Lit rendering,当物体没有光照贴图，所有顶点光照被应用                   |
| VertexLMRGBM | legacy Vertex Lit rendering,当物体有光照贴图，光照贴图按照 RGBM 编码(PC&console)     |
| VertexLM     | legacy Vertex Lit rendering,当物体有光照贴图，光照贴图按照 Double-LDR 编码（Mobile） |

***** RequireOptions 
指定 Pass 在满足某些外部条件时才被渲染。
| Name           | Detail                                           |
|----------------+--------------------------------------------------|
| SoftVegetation | 在 Quality Settings 中开启 SoftVegetation 才渲染 |
**** Render State Setup
Pass 可以设置图形硬件的渲染状态。
| Name                                                                         | Detial                                      |
|------------------------------------------------------------------------------+---------------------------------------------|
| Cull Back / Front / Off                                                      | 剔除                                        |
| ZTest (Less / Greater / LEqual / GEqual / Equal / NotEqual / Always)         | 深度测试                                    |
| ZWrite (On / Off)                                                            | 深度缓存区写入                              |
| Blend SourceBlendMode DestBlendMode                                          |                                             |
| Blend SourceBlendMode DestBlendMode, AlphaSourceBlendMode AlphaDestBlendMode |                                             |
| ColorMask RGB / A / 0 / any combination of R, G, B, A                        | ColorMask 0 将关闭颜色缓冲区中所有通道的写入 |
| Offset OffsetFactor, OffsetUnits                                             | 设置深度值的偏移                            |
** Unity's Rendering Pipline
Shaders 定义了一个物体看起来是怎样的，以及这个物体如何和光照交互。因为光照计算必须在 shader 中进行，并且可能有很多种类型的光照和阴影，所以编写高质量的可用的 shaders 将是一个复杂的任务。为了让这项工作变的简单，Unity 提供了 Surface Shaders，其中所有的光照、阴影、光照贴图，正向渲染、延迟渲染等事情都被自动化管理。
#+BEGIN_EXAMPLE
本小结内容翻译自 Unity 官方文档：
SL-RenderPipeline.html
RenderTech-ForwardRendering.html
RenderTech-DeferredShading.html
#+END_EXAMPLE
*** Rendering Path
光照是如何被应用以及 shader 的哪些 Passes 被使用都依赖于使用了哪种 Rendering Path. shader 中的每个 Pass 通过 Pass Tags 来传达它的光照类型。
| 采用的 Rendering Path     | 被使用的 Passes                    |
|--------------------------+-----------------------------------|
| Forward Rendering        | ForwardBase and ForwardAdd        |
| Deferred Shading         | Deferred                          |
| legacy Deferred Lighting | PrepassBase and PrepassFinal      |
| legacy Vertex Lit        | Vertex, VertexLMRGBM and VertexLM |
上面的任何 Rendering Path，用来渲染 Shadows 或深度贴图时，ShadowCaster Pass 会被用到。
*** Forward Rendering path
ForwardBase pass 用于一次性渲染环境光，光照贴图，主要的定向光以及不重要的光照(Spherical Harmonics)。 

ForwardAdd pass 用于任何附加的基于像素的光照。被该光照照明的每个物体都会调用一次该 Pass。

如果 Forward Rendering 被使用，但是 shader 中没有合适的 Passes（没有 ForwardBase 或 ForwardAdd 存在），则物体会被按照 Vertex Lit path 的方式渲染。
**** Forward Rendering Detail
依据光照对物体的影响，Forward Rendering path 使用一个或多个 Pass 来渲染这个物体。依据每个光照的不同设置和亮度，Forward Rendering 会对光照有不同的处理。
**** Implementation Detail
在正向渲染中，一些影响到每个物体的最亮的光照会基于每个像素来计算。然后，最多有 4 个点光照被基于每个顶点来计算。剩余的光照按照 Spherical Harmonics 方式来计算，该方法速度比较快，但是只是一种近似计算。

一个光照是否会被基于每个像素来计算依赖于下面几点：
1 光照的 RenderMode 属性被设置为 Not Important 将使用 per-vertex 或 SH 方式计算。
2 最亮的方向光总是使用 per-pixel 方式来计算的。
3 光照的 RenderMode 属性被设置为 Important 将使用 per-pixel 方式计算。
4 按照上面的方式，使用 per-pixel 方式计算的光照数目少于 QualitySetting 中 current Pixel Light Count 所设置的数量时，更多的光照会使用 per-pixel 方式来计算,从而减低明亮度。(光照是按照距离的平方衰减的，而顶点光照是线性插值，所以 per-vertex 会更亮)

Tips:
per-vertex 就是光照计算在顶点着色器中进行。
per-pixel 就是光照计算在片段着色器中进行。
SH 方式其实是计算光照的一种方法，这种计算方法是在顶点着色器中进行的。

使用 Forward Rendering 时，Unity 中的渲染处理在下面的 Passes 中进行：
Base Pass 应用于 per-pixel 方式的方向光照 和 所有 per-vertex/Spherical Harmonics 方式的光照。
其他的 per-pixel 方式的光照在附加的 Passes 中进行渲染，一个 Pass 对应每个光照。

例如，如果有一个物体被很多个光照所影响（下图 1 中的一个圆圈，被 A 到 H 个光照影响）：
我们假设光照 A 到 H 有相同的颜色和亮度，并且它们都设置 RenderMode 为 Auto。最亮的光将会使用 per-pixel 方式来计算（A 到 D）。
然后，最多 4 个光源会使用 per-vertex 方式来计算（D 到 G），最后剩余的光照使用 SH 方式来计算(G 到 H)。
如下图 2 所示，光照分组会有重叠。最后的使用 per-pixel 方式计算的光照会和使用 per-vertex 方式计算的结果混合，这样可以在物体运动或光照移动时减少“light popping”。
[[file:./doc_res/1ForwardLightsExample.png][Forward Rendering Pic1]]
[[file:./doc_res/2ForwardLightsClassify.png][Forward Rendering Pic2]]
***** Base Pass
Base pass 使用一个 per-pixel 方式计算的方向光照和所有的 SH 方式计算的光照渲染物体。这个阶段也会添加任何光照贴图，环境光
和发射光到 shader 中。该 Pass 中的方向光可以有阴影。注意光照贴图的物体不会从 SH 方式计算的光照中获得照明。
***** Additional Passes
Additional Passes 用来渲染影响到物体的每个额外的 per-pixel 方式计算的光照。在该 Pass 计算的光照不能有阴影效果。
（所以 Forward Rendering 只支持一个方向光有阴影）
**** Performance Considerations
Spherical Harmonics 方式计算的光照渲染速度非常快。他们消耗很少的 CPU 资源，并且对于 GPU 基本是无消耗的（也就是说，Base Passes 总是计算 SH 方式计算的光照，但是，基于 SH 的工作方式，无论有多少光照按照 SH 方式计算，其消耗都是一样的）。
SH 方式计算光照的缺点有： 
****** SH 是基于物体顶点的，而不是基于片段的。这意味着他们不支持光照的 Cookies 或法线贴图。
****** SH 是非常低频率的。你不能对 SH 方式计算的光照有有尖锐的光照变换。他们只会影响漫反射光照（对于镜面光来说频率太低了）
****** SH 是非局部的。点光源、聚光灯使用 SH 方式计算时，若靠近某些表面时看起来会是错误的。
总的来说，SH 方式计算光照对于低动态的物体来说通常是效果很好的。
*** Deferred Shading path
Deferred Pass 用来渲染光照计算需要的所有的信息（在内置 shaders 中会渲染：diffuse color, specular color, smoothness, world space normal, emission）。它还会添加光照贴图，反射探针以及环境光照到 emission 通道。
**** Overview
当使用延迟渲染时，对于可以影响一个物体的光照数量没有限制。所有的光照都是按照 per-pixel 方式计算的,这就意味着他们都可以正确地和法线贴图交互。另外所有的光照都可以有 cookies 和阴影。

延迟渲染的优势是光照处理的开销和被照亮的像素数量成正比。这是由场景中的光的体积大小决定的和被照亮的物体的数目无关。所以，保持小体积的光照可以改善性能。延迟渲染还有高度的一致性和可预测性。每个光照的效果是基于每个像素计算的，所以不会有在大的三角形上的光照计算被分解。

延迟渲染的缺点是，对于反锯齿没有真正的支持，并且不能够处理半透明的物体（这类物体需要通过 Forward Rendering 来渲染）。不支持 Mesh Render 的 Receive Shadows 标记，对于剔除层 masks 的支持也很有限。你只能使用最多 4 个剔除 masks。也就是说，你的剔除层 mask 必须至少包含所有的层减去任意的 4 个层，所以 32 个层中的 28 个层必须被设置。否则你将会得到变花的图像。
**** Requirements
延迟渲染需要图形卡包含 Multiple Render Targets，Shader Model 3.0 或者更高，支持深度贴图以及双面的模板缓冲区。大多数 PC2005 年以后的向卡支持延迟渲染，包括 GeForce6 以及更高，RadeonX1300 以及更高，InterG45+以及更高。在移动设备中，由于 MRT 使用的格式延迟渲染支持很有限（一些支持多个渲染目标的 GPUs 仍然只支持很有限的位数）。
注意：在使用正交投影时，不支持延迟渲染。如果摄像机的投影模式被设置为正交投影，这些数值将被覆盖，并且摄像机将总是使用 Forward Rendering。
**** Performance Considerations
在延迟渲染中渲染实时光照的开销和被照明的像素数量成比例，而和场景的复杂程度无关。所以小的点光源或聚光灯开销非常小，如果场景中的物体将它们整个或部分遮挡，渲染它们的开销将更小。

当然，带阴影的光照会比没有阴影的光照开销更大。在延迟渲染中，对于每个产生阴影的光照，产生阴影的物体仍然需要被渲染一次或多次。此外，应用阴影的光照着色器比阴影关闭的有更高的渲染开销。
**** Implementation Details
当使用延迟渲染时，Unity 中的渲染处理在发生在下面两个 Passes 中：

G-buffer Pass: 渲染物体来产生屏幕空间的 buffers，这些 buffers 中存储了漫反射颜色，镜面光颜色，平滑度，世界空间法线，发射颜色以及深度值。

Lighting Pass: 前面 Pass 产生的 buffers 在这里被使用，添加光照到 emission 缓存区。

在上面的处理过程结束后，物体包含的不能处理延迟渲染 shaders，将使用 Forward Rendering 来渲染。

默认的 G-Buffer 按照下面方式布局：
| Name          | 格式                  | 用途                            |
|---------------+-----------------------+---------------------------------|
| RT0           | ARGB32 format         | 漫反射颜色(RGB),不使用 A        |
| RT1           | ARGB32 format         | 镜面颜色(RGB),粗糙度(A)         |
| RT2           | ARGB2101010 format    | 世界空间法线量(RGB),不使用 A    |
| RT3           | ARGB32 (non-HDR)      | Emission+光照+光照贴图+反射探针 |
|               | ARGBHalf (HDR) format |                                 |
| Depth+Stencil |                       | 深度和模板缓冲区                |
所以默认的 g-buffer 布局下，非高动态范围下每个像素占 160 位，高动态范围下每个像素占 192 位。

当 camera 不使用 HDR 时，Emission+光照 buffer(RT3)使用了对数编码要比通常使用的 ARGB32 贴图能提供更大的动态范围。

当 camera 使用 HDR 渲染时，如果没有为 Emission+lighting buffer（RT3）创建独立的渲染对象，替代的渲染目标将被用作 RT3，camera 将会渲染到替代的渲染目标中。
**** G-Buffer Pass
G-Buffer Pass 为每个物体渲染一次。漫反射和镜面颜色，表面平滑度，世界空间的法线，发射+环境+反射+光照贴图都被渲染到 g-buffer 贴图中。g-buffer 贴图被设置为全局的着色器属性，从而在可以被着色器在后面阶段访问(名称为 CameraGBufferTexture0 ... CameraGBufferTexture3)
**** Lighting Pass
这个光照阶段会基于 g-buffer 和深度来计算光照。光照是在屏幕空间中计算的，所以光照花费的时间独立于场景的复杂度。光照被添加到发射缓冲区中。当对于场景的 Z buffer 测试开启时，和摄像机近平面没有相交的点光源和聚光灯会被当做 3D 形状来渲染。这使得部分或全部被遮挡的点光源或聚光灯的渲染开销很小。方向光和点光源聚光灯和近平面相交时，被当做全屏的方形面片来渲染。

如果一个光开启了阴影效果，他们也会在这个 Pass 中被渲染和应用。需要注意的是阴影并不是免费得来的；投影者需要被渲染并且一个更加复杂的光照着色器需要被应用。

唯一可用的光照模型是 Standard。如果想要一个不同的模型，你可以修改光照着色器的 Pass，将修改后的 Internal-DeferredShading.shader 版本从内置的 shaders 放到你自己的 Assets/Resources 目录下。然后在 Edit->Project Settings->Graphics 窗口中，选择“Deferred”下拉列表中的"Custum Shader"。然后修改着色器的选项将会显示出你正在使用的着色器。
*** Legacy Deferred Lighting path
官方都要遗弃了，就不用了解了。

PrepassBase pass 渲染法线和镜面指数；

PrepassFinal pass 将贴图、光照和发射材质属性组合起来渲染最终的颜色。所有的正式的光照被分开在屏幕空间中计算。
*** Legacy Vertex Lit Rendering path
因为顶点光照通常在不支持可编程渲染的平台上，Unity 无法创建多个 shader 变量来处理有光照贴图和没光照贴图的情况。所以为了处理有光照贴图和无光照贴图的物体，必须显式地写多个 Pass。

Vertex Pass 用于无光照贴图的物体。使用 Blinn-Phong 光照模型对所有的光照一次进行渲染。

VertexLMRGBM Pass 用于有光照贴图的物体，光照贴图按照 RGBM 编码（PC 和 consoles 平台）。没有实时的光照被应用，Pass 只是组合了贴图和光照贴图。

VertexLMM Pass 用于有光照贴图的物体，光照贴图按照 double-LDR 编码（mobile 平台）。没有实时的光照被应用，Pass 只是组合了贴图和光照贴图。
** RenderQueue And z-depth
RenderQueue 是用来控制渲染顺序的。系统内置了下面的渲染队列 Background(1000) Geometry(2000) AlphaTest(2450) Transparent(3000) Overlay(4000)。索引值小的队列先渲染。
z-depth 是表示被渲染的片段离摄像机的距离。渲染的时候会依据深度测试函数来比较此时被渲染的片段的 z-depth 值和当前 z-buffer 中的 z-depth 值，测试通过以后，该片段的颜色才会被写入。
* Reflecting your world
** 光学基础
反射：当光在两种物质分界面上改变传播方向又返回原来物质中的现象，叫做光的反射。

折射：光从一种透明介质斜射入另一种透明介质时，传播方向一般会发生变化，这种现象叫光的折射。

散射：光束通过不均匀媒质时，部分光束将偏离原来方向而分散传播，从侧向也可以看到光的现象，叫做光的散射。散射是多重折射和反射的结果。
** Fresnel reflection
当光入射到折射率不同的两个媒质分界面时，一部分光会被反射，这种现象称为菲涅尔反射(其实就是光的反射，只不过这个现象是菲涅尔发现的)。
视线垂直于表面时，反射较弱，而当视线非垂直表面时，夹角越小，反射越明显，这就是“菲涅尔效应”。
*** 如何模拟菲涅尔效应效果？
#+BEGIN_EXAMPLE cg
// rim 随视角和法线夹角的增大而增大
float rim = 1.0 - saturate(dot(o.Normal,normalize(IN.viewDir)));
rim = pow(rim,_RimPower);

o.Albedo = color_.rgb * _DiffuseTint.rgb;
// 物体反射的颜色 随 rim 的增大而增大。即视角正对物体时，反射的颜色少，随着视角和物体法线夹角增大，反射的颜色增大。
o.Emission = (texCUBE(_Cubemap,IN.worldRefl).rgb * _ReflectAmount)*rim;
o.Specular = _SpecPower;
#+END_EXAMPLE
* Shader Optimize
** 数据类型
| Type  | Detial            | Range                                | Usage                          |
|-------+-------------------+--------------------------------------+--------------------------------|
| float | 32 位单精度浮点数 | 和通常编程中的 float 一样            | 存放物体坐标                   |
| half  | 16 位中精度浮点数 | –60000 to +60000,精度是小数点后 3 位 | 适合存放 UV 值，颜色值         |
| fixed | 11 位低精度浮点数 | 范围是[-2, 2]，精度是 1/256          | 可用于光照计算，颜色，单位向量 |
[[https://docs.unity3d.com/Manual/SL-DataTypesAndPrecision.html][SL-DataTypesAndPrecision]]
** noforwardadd
该选项基于一个开关来自动告诉 Unity，任何采用该着色器的物体只从一个单一的方向光接收每个像素的光照。该着色器计算的其他光照将使用 SH 方式计算。
#+BEGIN_SRC surface shader
#pragma surface surf SimpleLambert noforwardadd
#+END_SRC
** exclude_path
exclude_path:deferred, exclude_path:forward, exclude_path:prepass
不为指定渲染方式(Deferred Shading, Forward , Legacy Deferred)生成代码。
#+BEGIN_SRC surface shader
#pragma surface surf SimpleLambert exclude_path:prepass
#+END_SRC
** nolightmap
关闭该 shader 的所有光照贴图支持。
#+BEGIN_SRC surface shader
#pragma surface surf SimpleLambert noforwardadd nolightmap halfasview exclude_path:prepass
#+END_SRC
** halfasview
用 halfDir 代替 viewDir 作为光照函数的参数传入 shader。
** 参考资料
[[https://docs.unity3d.com/Manual/SL-SurfaceShaders.html][Shader 编译指令]]
[[https://docs.unity3d.com/Manual/MobileOptimizationPracticalGuide.html][Mobile Optimize Doc]]
* Screen Effect
** 概述
屏幕特效特效就相当于对最终显示图片到显示器之前的图片进行 PS 处理。具体处理每个像素的过程会通过一个 Shader 来进行，进行处理的时机是 Camera.OnRenderImage 被触发的时候，而 Graphics.Blit 可以将处理结果生效。
处理每个像素的 Shader 通常会使用下面的一些配置：
#+BEGIN_SRC surface shader
#pragma vertex vert_img        // 使用系统内置的函数
#pragma fragment frag          // 具体处理过程在 frag 中实现
#pragma fragmentoption ARB_precision_hint_fastest
// 上面这个参数用来指定片段着色器计算精度采用快速模式
// http://forum.unity3d.com/threads/pragma-fragmentoption-arb_precision_hint_fastest-any-documentation-about-this.294465/
#+END_SRC
** 明度 亮度 饱和度 对比度
明度（Brightness）是眼睛对光源和物体表面的明暗程度的感觉，主要是由光线强弱决定的一种视觉经验。
亮度（Luminance）是指发光体（反光体）表面发光（反光）强弱的物理量。
饱和度（Saturation）是指色彩的鲜艳程度，也称色彩的纯度。饱和度取决于该色中含色成分和消色成分（灰色）的比例。含色成分越大，饱和度越大；消色成分越大，饱和度越小。纯的颜色都是高度饱和的，如鲜红，鲜绿。混杂上白色，灰色或其他色调的颜色，是不饱和的颜色，如绛紫，粉红，黄褐等。完全不饱和的颜色根本没有色调，如黑白之间的各种灰色。
对比度（Contrast）指的是一幅图像中明暗区域最亮的白和最暗的黑之间不同亮度层级的测量，差异范围越大代表对比越大，差异范围越小代表对比越小，好的对比率 120:1 就可容易地显示生动、丰富的色彩，当对比率高达 300:1 时，便可支持各阶的颜色。但对比率遭受和亮度相同的困境，现今尚无一套有效又公正的标准来衡量对比率，所以最好的辨识方式还是依靠使用者眼睛。
* Tips:
** unity 坐标系
unity 为左手坐标系。
** Skin Shader
http://ten24.info/skin-shading-in-unity/
** Blinn Phong And Phong
http://gamedev.stackexchange.com/questions/82494/why-is-h-blinn-used-instead-of-r-phong-in-specular-shading

** Error  
*** Shader error in Too many texture interpolators would be used for ForwardBase pass (11 out of max 10)
将 #pragma target 3.0 变为 #pragma target 4.0 可解决问题
*** 如果发现颜色部分正确部分不正确
**** 检查 Input 中 viewDir lightDir 是否使用的是 float3.
使用 float 会造成 yz 分量的缺失，导致 yz 分量不为 0 时，显示错误。
*** Unity 渲染半透明物体，Editor 下 Scene 中可见，在 Game 中不可见
是因为被 Skybox 遮挡住了。Skybox 的深度值为 1，如果被渲染物体的深度值大于 1 肯定会被遮挡；如果被渲染的物体深度值等于 1，而且物体的渲染顺序在 Skybox 之前，物体也会被遮挡。
*** vert': output parameter 'o' not completely initialized
#+BEGIN_SRC surface shader
void vert (inout appdata_full v, out Input o)  
{
	// 添加下面这句代码可以解决该错误
  UNITY_INITIALIZE_OUTPUT(Input,o);  
} 
#+END_SRC
** Normal Map
Normal Map 又叫 Ramp Map，其实就是法线贴图。
UnpackNormal 的作用是将 0-1 范围的数值(法线贴图存储的颜色值)映射为-1-1 范围的数值（法线向量）。
*** 参考资料
[[http://www.songho.ca/opengl/gl_normaltransform.html][Normal 变换矩阵推导]]
[[http://blog.csdn.net/candycat1992/article/details/41605257][Unity 中的 Normal Map]]
[[http://http.developer.nvidia.com/CgTutorial/cg_tutorial_chapter08.html][Cg 中的 Normal Map]]
[[http://learnopengl.com/#!Advanced-Lighting/Normal-Mapping][Normal Map Detail]]
* 参考资料
https://onevcat.com/2013/07/shader-tutorial-1/
