    TIPS

1. 设置缩放变换矩阵时需要将w设置为1，否则缩放无效
e.g:
mat4 scale = mat4x4(
    vec4(0.1,   0,   0,   0),
    vec4(  0, 0.1,   0,   0),
    vec4(  0,   0, 0.1,   0),
    vec4(  0,   0,   0,   1)
    );

2. shader中不使用的uniform会被自动移除
下面的代码可以让 model_matrix uniform不被移除，而且可以通过颜色确定 model_matrix的值
//vs_fs_color = model_matrix[2];
vs_fs_color = color;


3. Qt 开启c++11
CONFIG += c++11

4. glGetError glGetUniformLocation bug
第一次调用glGetUniformLocation会报下面错误
error GL_INVALID_OPERATION = 1282
Error glGetUniformLocation local = 0

5. 绘制的物体没有显示出来
（1）是否开启了深度测试，导致物体被剔除了
（2）查看物体是否位于视野外，导致物体被剔除了
（3）查看是否开启了glEnable(GL_CULL_FACE); 物体表面被当做背面了！
（4）检查glBufferData是否使用了正确的参数
下面的参数是错误的
glBufferData(_vabuffer, vertex_data_size, vertex_data, GL_STATIC_DRAW);
下面的参数是正确
glBufferData(GL_ARRAY_BUFFER, vertex_data_size, vertex_data, GL_STATIC_DRAW);
（5）检查glVertexAttribPointer是否使用了正确的参数
static GLfloat vertex_data[] = {
    -1.0, -1.0,  0.0,  -1.0,
     0.0,  1.0,  0.0,  -1.0,
     1.0, -1.0,  0.0,  -1.0
};
下面的参数是错误的
glVertexAttribPointer(0,4,GL_FLOAT,GL_FALSE,0,vertex_data);
下面的参数是正确
glVertexAttribPointer(0,4,GL_FLOAT,GL_FALSE,4*sizeof(GLfloat),0);
https://www.opengl.org/sdk/docs/man/html/glVertexAttribPointer.xhtml
void glVertexAttribPointer(
    GLuint index,               // 属性的索引
    GLint size,                 // 属性数据包含多少个type的数据
    GLenum type,                // 属性数据类型
    GLboolean normalized,       // 是否标准化
    GLsizei stride,             // 两个属性之间的间隔
    const GLvoid * pointer);    // 第一个属性数据距离数据起始地址的偏移量
（6）检查glBindBuffer和glBindVertexArray的位置
下面的位置是错误的：
glBindBuffer(GL_ARRAY_BUFFER,0);
glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,0);
glBindVertexArray(0);
下面的位置是正确的：
glBindVertexArray(0);
glBindBuffer(GL_ARRAY_BUFFER,0);
glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,0);
（7）检查顶点的坐标范围
默认情况下x,y,z的范围只有在[-1,1]才可以显示。如果需要修改范围需要指定投影矩阵，
用glm::ortho或者glm::perspective
（8）检查glDepthFunc是否正确
默认值为GL_LESS
GL_LEQUAL表示如果输入的深度值小于或等于参考值，则通过
深度值为摄像机到物体的距离

6. Qt 包含库头文件
在.pro文件中添加如下代码
INCLUDEPATH += $$PWD/../../../libs/glm
DEPENDPATH += $$PWD/../../../libs/glm

7. 不能将build目录放在项目目录下，否则复制目录会递归死循环

8. GTimerMgr中Schedule(target,task,...)task不能用std::function
因为std::function无法比较，Unschedule时需要支持指定task的Unschedule。

9. 注意： vector遍历删除照成iterator实效的问题
例如 GTimerMgr::Unschedule中

TODO
lesson4
实现一个描边效果
lesson5
裁剪平面例子实现
实现一个摄像机类
离子系统实现
lesson6
实现一个skybox

参考链接：
Modern OpenGL Tutorials:            http://ogldev.atspace.co.uk/index.html
learnopengl:                        https://learnopengl-cn.readthedocs.io/zh/latest/



















